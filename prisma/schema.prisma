generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                   @id @unique
  role                   Role                     @default(STUDENT)
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  nickname               String                   @default("이름")
  inventory              Inventory[]
  InventoryUpdateHistory InventoryUpdateHistory[]
  notices                Notice[]

  @@map("user")
}

model Notice {
  id        Int      @id @default(autoincrement())
  author    String
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  avatarUrl String
  userId    String?
  User      User?    @relation(fields: [userId], references: [id])

  @@index([createdAt])
  @@index([userId], map: "notice_userId_fkey")
  @@map("notice")
}

model Inventory {
  id              Int                      @id @default(autoincrement())
  name            String
  type            InventoryType            @default(SUPPLY)
  quantity        Int?                     @default(-1)
  status          InventoryStatus          @default(SUFFICIENT)
  category        String
  imageUrl        String?
  lastUpdated     DateTime                 @default(now())
  createdBy       String
  updatedBy       String
  memo            String?                  @db.Text
  minimumQuantity Int?
  manufacturer    String?
  modelNumber     String?
  expirationDate  DateTime?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  locationId      Int?
  parentLocation  String
  subLocation     String?
  user            User                     @relation(fields: [createdBy], references: [id])
  locationRef     InventoryLocation?       @relation(fields: [locationId], references: [id])
  updateHistory   InventoryUpdateHistory[]
  mainCategory    String?
  subCategory     String?
  reservations    Reservation[]

  @@index([type])
  @@index([category])
  @@index([parentLocation])
  @@index([subLocation])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([status])
  @@index([locationId], map: "inventory_locationId_fkey")
  @@index([mainCategory])
  @@index([subCategory])
  @@map("inventory")
}

model InventoryUpdateHistory {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  updatedBy   String
  changes     Json
  updatedAt   DateTime  @default(now())
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  user        User      @relation(fields: [updatedBy], references: [id])

  @@index([inventoryId])
  @@index([updatedBy])
  @@map("inventory_update_history")
}

model EnumReference {
  id             Int            @id @default(autoincrement())
  supplyCategory SupplyCategory
  foodCategory   FoodCategory
  supplyLocation SupplyLocation
  foodLocation   FoodLocation
  createdAt      DateTime       @default(now())

  @@map("enum_reference")
}

model InventoryLocation {
  id           Int                 @id @default(autoincrement())
  name         String
  type         InventoryType
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  parentId     Int?
  inventory    Inventory[]
  parent       InventoryLocation?  @relation("SubLocations", fields: [parentId], references: [id])
  subLocations InventoryLocation[] @relation("SubLocations")

  @@unique([name, type, parentId])
  @@index([parentId], map: "inventory_location_parentId_fkey")
  @@map("inventory_location")
}

enum InventoryType {
  SUPPLY @map("물품")
  FOOD   @map("식재료")
}

enum InventoryStatus {
  SUFFICIENT @map("충분")
  LOW        @map("부족")
}

enum SupplyCategory {
  CLEANING   @map("청소용품")
  DISPOSABLE @map("일회용품")
  FURNITURE  @map("가구")
  KITCHEN    @map("주방용품")
  OFFICE     @map("사무용품")
}

enum FoodCategory {
  VEGETABLE @map("채소")
  MEAT      @map("육류")
  SEAFOOD   @map("수산물")
  SEASONING @map("조미료")
  GRAIN     @map("곡물")
  DAIRY     @map("유제품")
  BEVERAGE  @map("음료")
}

enum SupplyLocation {
  KITCHEN @map("주방")
  HALL    @map("홀")
  STORAGE @map("창고")
}

enum FoodLocation {
  KITCHEN      @map("주방")
  STORAGE      @map("창고")
  REFRIGERATOR @map("냉장고")
}

enum Role {
  DIRECTOR    @map("이사")
  CEO         @map("대표")
  DEPARTMENT  @map("국장")
  TEAM_LEADER @map("팀장")
  TEACHER     @map("선생")
  STUDENT     @map("학생")
  UNKNOWN     @map("직급")
}

model RestaurantTable {
  id           Int                @id @default(autoincrement())
  tableNumber  Int                @unique
  capacity     Int
  location     String
  reservations ReservationTable[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("restaurant_tables")
}

model Guest {
  id              Int           @id @default(autoincrement())
  name            String
  lastBookingDate DateTime
  gender          String?
  reservations    Reservation[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@map("guests")
}

model Reservation {
  id              Int                @id @default(autoincrement())
  guestId         Int
  reservationDate DateTime
  numberOfGuests  Int
  usageDate       DateTime
  isCanceled      Boolean            @default(false)
  inventoryId     Int?
  additionalNotes String?            @db.Text
  guest           Guest              @relation(fields: [guestId], references: [id])
  inventory       Inventory?         @relation(fields: [inventoryId], references: [id])
  tables          ReservationTable[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("reservations")
}

model ReservationTable {
  id            Int             @id @default(autoincrement())
  reservationId Int
  tableId       Int
  seatsUsed     Int
  reservation   Reservation     @relation(fields: [reservationId], references: [id])
  table         RestaurantTable @relation(fields: [tableId], references: [id])

  @@unique([reservationId, tableId])
  @@map("reservation_tables")
}
