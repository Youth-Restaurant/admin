generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum InventoryType {
  SUPPLY @map("물품")
  FOOD   @map("식재료")
}

enum InventoryStatus {
  SUFFICIENT @map("충분")
  LOW        @map("부족")
}

enum SupplyCategory {
  CLEANING   @map("청소용품")
  DISPOSABLE @map("일회용품")
  FURNITURE  @map("가구")
  KITCHEN    @map("주방용품")
  OFFICE     @map("사무용품")
}

enum FoodCategory {
  VEGETABLE @map("채소")
  MEAT      @map("육류")
  SEAFOOD   @map("수산물")
  SEASONING @map("조미료")
  GRAIN     @map("곡물")
  DAIRY     @map("유제품")
  BEVERAGE  @map("음료")
}

enum SupplyLocation {
  KITCHEN @map("주방")
  HALL    @map("홀")
  STORAGE @map("창고")
}

enum FoodLocation {
  KITCHEN      @map("주방")
  STORAGE      @map("창고")
  REFRIGERATOR @map("냉장고")
}

enum Role {
  DIRECTOR    @map("이사")
  CEO         @map("대표")
  DEPARTMENT  @map("국장")
  TEAM_LEADER @map("팀장")
  TEACHER     @map("선생")
  STUDENT     @map("학생")
  UNKNOWN     @map("직급")
}

model User {
  id                     String                   @id @unique
  nickname               String                   @default("이름")
  // image     String?
  role                   Role                     @default(STUDENT)
  notices                Notice[]
  inventory              Inventory[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  // email     String?
  InventoryUpdateHistory InventoryUpdateHistory[]

  @@map("user")
}

model Notice {
  id        Int      @id @default(autoincrement())
  author    String
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  avatarUrl String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([createdAt])
  @@map("notice")
}

model Inventory {
  id              Int             @id @default(autoincrement())
  name            String
  type            InventoryType   @default(SUPPLY)
  quantity        Int?            @default(-1)
  status          InventoryStatus @default(SUFFICIENT)
  location        String
  category        String
  imageUrl        String?
  lastUpdated     DateTime        @default(now())
  createdBy       String
  updatedBy       String
  user            User            @relation(fields: [createdBy], references: [id])
  memo            String?         @db.Text
  minimumQuantity Int?

  // Supply-specific fields
  manufacturer String?
  modelNumber  String?

  // Food-specific fields
  expirationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to update history
  updateHistory InventoryUpdateHistory[]

  // 위치 모델 연결
  locationId  Int?
  locationRef InventoryLocation? @relation(fields: [locationId], references: [id])

  @@index([type])
  @@index([category])
  @@index([location])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([status])
  @@map("inventory")
}

model InventoryUpdateHistory {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  updatedBy   String
  user        User      @relation(fields: [updatedBy], references: [id])
  changes     Json // 변경된 필드와 값을 JSON 형태로 저장
  updatedAt   DateTime  @default(now())

  @@index([inventoryId])
  @@index([updatedBy])
  @@map("inventory_update_history")
}

// Enum reference model for type safety
model EnumReference {
  id             Int            @id @default(autoincrement())
  supplyCategory SupplyCategory
  foodCategory   FoodCategory
  supplyLocation SupplyLocation
  foodLocation   FoodLocation
  createdAt      DateTime       @default(now())

  @@map("enum_reference")
}

// 위치 모델 수정
model InventoryLocation {
  id           Int                 @id @default(autoincrement())
  name         String
  type         InventoryType
  parentId     Int? // 상위 위치 ID
  parent       InventoryLocation?  @relation("SubLocations", fields: [parentId], references: [id])
  subLocations InventoryLocation[] @relation("SubLocations")
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  inventory    Inventory[]

  @@unique([name, type, parentId])
  @@map("inventory_location")
}
