generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// InventoryType enum 수정
enum InventoryType {
  SUPPLIES @map("supplies") // 물품 타입
  FOOD     @map("food") // 식재료 타입
}

enum Role {
  DIRECTOR    @map("이사")
  CEO         @map("대표")
  DEPARTMENT  @map("국장")
  TEAM_LEADER @map("팀장")
  TEACHER     @map("선생")
  STUDENT     @map("학생")
  UNKNOWN     @map("직급")
}

enum InventoryStatus {
  SUFFICIENT
  LOW
}

enum SupplyCategory {
  CLEANING
  DISPOSABLE
  FURNITURE
  KITCHEN
  OFFICE
}

enum FoodCategory {
  VEGETABLE
  MEAT
  SEAFOOD
  SEASONING
  GRAIN
  DAIRY
  BEVERAGE
}

enum SupplyLocation {
  KITCHEN
  HALL
  STORAGE
}

enum FoodLocation {
  KITCHEN
  STORAGE
  REFRIGERATOR
}

// Enum 참조를 위한 테이블들
model EnumReference {
  id             Int            @id @default(autoincrement())
  supplyCategory SupplyCategory
  foodCategory   FoodCategory
  supplyLocation SupplyLocation
  foodLocation   FoodLocation
  createdAt      DateTime       @default(now())

  @@map("enum_reference")
}

model User {
  id        String      @id @default(cuid())
  nickname  String      @unique // 카카오 닉네임
  email     String?
  image     String?
  role      Role        @default(STUDENT)
  posts     Post[]
  inventory Inventory[] // 재고 항목과의 관계 추가
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  role      Role
  content   String   @db.Text
  createdAt DateTime @default(now())
  avatarUrl String
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@index([createdAt])
}

// 재고 모델
model Inventory {
  id              Int             @id @default(autoincrement())
  name            String
  type            InventoryType   @default(SUPPLIES) // String에서 InventoryType으로 변경
  quantity        Int             @default(-1)
  status          InventoryStatus @default(SUFFICIENT)
  location        String
  category        String
  imageUrl        String?
  lastUpdated     DateTime        @default(now())
  updatedBy       String
  user            User            @relation(fields: [updatedBy], references: [id])
  memo            String?         @db.Text
  minimumQuantity Int?

  // 물품 전용 필드
  manufacturer String?
  modelNumber  String?

  // 식재료 전용 필드
  expirationDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([category])
  @@index([location])
  @@index([updatedBy])
  @@index([status])
}
